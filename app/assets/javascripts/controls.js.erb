console.log("CONTROL PAGE LOADING")

// direction should be -1 for left and 1 for right
var nearestLivingEnemy = function(enemyIndex, direction) {
  if(!currentEnemies[enemyIndex + direction]) {
    return currentEnemies[enemyIndex];
  } else if(currentEnemies[enemyIndex + direction].pose !== "dead") {
    return currentEnemies[enemyIndex + direction];
  } else {
    return nearestLivingEnemy(enemyIndex + direction, direction);
  }
};

var processInputBuffer = function(){
  if(inBattle) { // Battle controls
    if((keys_pressed.indexOf(66) != -1) && (keys_pressed_checker.indexOf(66) === -1) ) {
      keys_pressed_checker.push(66);
      if(your_char.enemyTarget) {
        slashes.push(new Slash(your_char.enemyTarget));
        your_char.attackEnemy(your_char.enemyTarget);
        slashPos = currentEnemies.indexOf(your_char.enemyTarget);
      };
    } else if( (keys_pressed_checker.indexOf(65) === -1 && keys_pressed_checker.indexOf(37) === -1) && ((keys_pressed.indexOf(65) != -1) || (keys_pressed.indexOf(37) != -1)) ) {
      keys_pressed_checker.push(65);
      keys_pressed_checker.push(37);
      for (var i = currentEnemies.length - 1; i >= 0; i--) {
        if(your_char.enemyTarget === currentEnemies[i]) {
          if( (i - 1 >= 0) ) {
            console.log("checker",keys_pressed_checker);
            your_char.changeTarget(nearestLivingEnemy(i, -1));
            break;
          };
        };
      };
    } else if( (keys_pressed_checker.indexOf(83) === -1 && keys_pressed_checker.indexOf(39) === -1) && ((keys_pressed.indexOf(83) != -1) || (keys_pressed.indexOf(39) != -1)) ) {
      keys_pressed_checker.push(83);
      keys_pressed_checker.push(39);
      for (var i = currentEnemies.length - 1; i >= 0; i--) {
        if(your_char.enemyTarget === currentEnemies[i]) {
          if( (i + 1 < currentEnemies.length) ) {
            your_char.changeTarget(nearestLivingEnemy(i, 1));
            break;
          };
        };
      };
    } else if( (keys_pressed.indexOf(49) != -1) && (keys_pressed_checker.indexOf(49) === -1) ) {
      keys_pressed_checker.push(49);
      usePotion = true;
      if(your_char.recoveryTime <= 0 && your_char.inventory.indexOf("potion") !== -1) {
        your_char.inventory.splice(your_char.inventory.indexOf("potion"), 1);
        your_char.health = Math.min(your_char.health + your_char.max_health * 0.2, your_char.max_health);
        your_char.recoveryTime += 90;
        recentlyRecovered = 3;
      };
    } else if( (keys_pressed.indexOf(32) != -1) && (keys_pressed_checker.indexOf(32) === -1) ) {
      keys_pressed_checker.push(32);
      if(battleOver === true) {
        clearMessage = true;
      };
    };
  } else { // Field controls
    your_char.turnedThisFrame = false;
    var currentPositionX = your_char.pos_x;
    var currentPositionY = your_char.pos_y;
      if (keys_pressed.indexOf(16) != -1) {
        if (keys_pressed.indexOf(37) != -1) {
          your_char.faceDirection("west");
          your_char.turnedThisFrame = true;
          your_char.pos_x--;
        };
        if (keys_pressed.indexOf(39) != -1) {
          your_char.faceDirection("east");
          your_char.turnedThisFrame = true;
          your_char.pos_x++;
        };
        if (keys_pressed.indexOf(38) != -1) {
          your_char.faceDirection("north");
          your_char.turnedThisFrame = true;
          your_char.pos_y--;
        };
        if (keys_pressed.indexOf(40) != -1) {
          your_char.faceDirection("south");
          your_char.turnedThisFrame = true;
          your_char.pos_y++;
        };
      } else {
        if (keys_pressed.indexOf(37) != -1) {
          your_char.faceDirection("west");
          your_char.turnedThisFrame = true;
          your_char.pos_x-= your_char.speed;
        };
        if (keys_pressed.indexOf(39) != -1) {
          your_char.faceDirection("east");
          your_char.turnedThisFrame = true;
          your_char.pos_x+= your_char.speed;
        };
        if (keys_pressed.indexOf(38) != -1) {
          your_char.faceDirection("north");
          your_char.turnedThisFrame = true;
          your_char.pos_y-= your_char.speed;
        };
        if (keys_pressed.indexOf(40) != -1) {
          your_char.faceDirection("south");
          your_char.turnedThisFrame = true;
          your_char.pos_y+= your_char.speed;
        };
      };
      distanceTraveled += Math.abs(your_char.pos_x - currentPositionX);
      distanceTraveled += Math.abs(your_char.pos_y - currentPositionY);
      checkEncounter();
    }
};

function removeMenus(){
  $(".player-menu").remove();
  $(".other-player-menu").remove();
  $(".npc-menu").remove();
}

var allowInput = function() {
  $(document).keydown(function(e){
    removeMenus();
    if(keys_pressed.indexOf(e.which) === -1) {
      keys_pressed.push(e.which);
    };
    console.log(keys_pressed);
  });
  $(document).keyup(function(e){
    keys_pressed = keys_pressed.filter(function(keycode){
      return keycode != e.which;
    });
    keys_pressed_checker = keys_pressed_checker.filter(function(keycode){
      if(e.which === 65 || e.which === 37) {
        return (keycode !== 65 && keycode !== 37)
      } else if(e.which === 83 || e.which === 39) {
        return (keycode !== 83 && keycode !== 39)
      } else {
        return keycode !== e.which;
      }
    });
  });
  setInterval(processInputBuffer, FRAME_RATE/2);
};

function getTextWidth(text, font) {
  // re-use canvas object for better performance
  var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement("canvas"));
  var context = canvas.getContext("2d");
  context.font = font;
  var metrics = context.measureText(text);
  return metrics.width;
}

var allowClick = function() {
  //click listener
  document.getElementById('game_screen').addEventListener('click', function(e) {
    global_x = e.pageX + backgroundScrollX - 20 - $('#game_screen').offset().left;
    global_y = e.pageY + backgroundScrollY - 12 - $('#game_screen').offset().top //- $('.navbar').offset().top;
    // x and y relative to canvas
    var x = e.pageX - 20 - $('#game_screen').offset().left
    var y = e.pageY - 12 - $('#game_screen').offset().top //- $('.navbar').offset().top;
    console.log(global_x, global_y);
    clickLocation = [];
    clickLocation.push(x);
    clickLocation.push(y);
    removeMenus();
    clicked = [];
    if (inBattle === true) {console.log("you're in a battle"); return false}
    // click yourself
    if((global_x >= your_char.pos_x && global_x <= your_char.pos_x + 35) && (global_y >= your_char.pos_y && global_y <= your_char.pos_y + 75)) {
      console.log("clicked yourself")
      clicked.push("yourself");
      var width = getTextWidth("I am " + your_character_name + "!", "18px Arial");
      if (partyMembers.length < 1) {
        var menu = '<div class="player-menu" style="text-align:center;padding:7px;position:absolute;background-color:white;top:' + (75 +clickLocation[1]).toString() + 'px;left:' + (clickLocation[0]).toString() + 'px;width:'+ width.toString() +'px;height:30px;">I am '+ your_character_name +'!</div>';
      } else if (partyMembers.length > 0){
        otherWidth = getTextWidth("Leave party!", "18px Arial");
        if (otherWidth > width) {width = otherWidth};
        var menu = '<div class="player-menu" style="text-align:center;padding:7px;position:absolute;background-color:white;top:' + (75 +clickLocation[1]).toString() + 'px;left:' + (clickLocation[0]).toString() + 'px;width:'+ (width + 10).toString() +'px;height:60px;">I am '+ your_character_name +'!<button id="leave-party">Leave Party</button></div>';
      }
      $("body").prepend(menu);

      // click other chars
    } else if(checkOther(global_x, global_y) != false) {
      console.log("CLICK OTHER PLAYER");
      otherPlayerMenu = true;
      clicked.push("other");
      clicked.push(checkOther(global_x, global_y));
      var width = getTextWidth('Join party with ' + clicked[1] + '!', "18px Arial");
      // var menu = '<div class="other-player-menu" style="text-align:center;padding:7px;position:absolute;background-color:white;top:' + (60 +clickLocation[1]).toString() + 'px;left:' + (clickLocation[0]).toString() + 'px;width:'+ width.toString() +'px;height:75px;"><button id="party" style="margin-bottom:3px;">Join party with '+ clicked[1] +'!</button><br><button id="trade">Trade with '+ clicked[1] +'!</button><br><button id="pvp">Fight '+ clicked[1] +'!</button></div>';
      var menu = '<div class="other-player-menu" style="text-align:center;padding:7px;position:absolute;background-color:white;top:' + (60 +clickLocation[1]).toString() + 'px;left:' + (clickLocation[0]).toString() + 'px;width:'+ width.toString() +'px;height:75px;"><button id="party" style="margin-bottom:3px;">Join party with '+ clicked[1] +'!</button><br><button id="trade">Trade with '+ clicked[1] +'!</button></div>';
      $("body").prepend(menu);

      // click NPC
    } else if(checkNpc(global_x, global_y) != false) {
      console.log("CLICK NPC");
      clicked.push("NPC");
      clicked.push(checkNpc(global_x, global_y));
      var width = getTextWidth('I am A' + clicked[1] + ' !', "18px Arial");
      var menu = '<div class="npc-menu" style="text-align:center;padding:7px;position:absolute;background-color:white;top:' + (60 +clickLocation[1]).toString() + 'px;left:' + (clickLocation[0]).toString() + 'px;width:'+ width.toString() +'px;height:75px;">I am ' + clicked[1] +' !<button id="boss-battle" style="margin-bottom:3px;">Fight '+ clicked[1] +'!</button></div>';
      $("body").prepend(menu);
    }
  }, false);
}

var checkOther = function(x, y) {
  for (var i = playerNames.length - 1; i >= 0; i--) {
    otherPlayerX = otherPlayers[playerNames[i]].pos_x;
    otherPlayerY = otherPlayers[playerNames[i]].pos_y;
    if ((x >= otherPlayerX && x<= otherPlayerX + 35 ) && (y >= otherPlayerY && y<= otherPlayerY +75)) {
      return playerNames[i];
    };
  };
  return false;
}

var checkNpc = function(x, y) {
  for (var i = npcs.length - 1; i >= 0; i--) {
    npcX = npcs[i].pos_x;
    npcY = npcs[i].pos_y;
    if ((x >= npcX && x<= npcX + npcs[i].width ) && (y >= npcY && y<= npcY + npcs[i].height)) {
      return npcs[i].name;
    };
  };
  return false;
}

$( document ).ready(function() {
  $("body").on("click", "#party", function(e){
    e.preventDefault;
    if (partyMembers.indexOf(clicked[1]) === -1 ) {
      otherPlayertoPartyWith = clicked[1];
    }
    removeMenus();
  });
  $("body").on("click", "#trade", function(e){
    e.preventDefault;
    otherPlayertoTradeWith = clicked[1];
    removeMenus();
  });
  $("body").on("click", "#leave-party", function(e){
    e.preventDefault;
    leaveParty = true;
    partyMembers = [];
    removeMenus();
  });
  $("body").on("click", "#boss-battle", function(e){
    e.preventDefault;
    prepareBossBattle(clicked[1]);
    removeMenus();
  });
  // $("body").on("click", "#pvp", function(e){
  //   e.preventDefault;
  //   playerOpponent = clicked[1];
  //   leaveParty = true;
  //   $(".player-menu").remove();
  // });
  $("#chat-box").on("click", "#chat-submit", function(e){
    e.preventDefault;
    chatMessage = $("input").val();
    $("#chat-message-list").append('<li class="message">'+ your_character_name+": " + chatMessage + "</li>");
    $("input").val('');
    document.getElementById( 'bottom' ).scrollIntoView();

  });

});
