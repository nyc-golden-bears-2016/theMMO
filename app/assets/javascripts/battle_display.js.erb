var refreshBattleDisplay = function(){
  	d3.select("body").selectAll("svg").remove();
};

var battleDisplay = function(player, enemies){

  var dataset_1 = [];
  var dataset_1_max = [];
  var dataset_2 = [];
  var dataset_2_max = [];
  var dataset_2_name = [];

	var DISPLAY_WIDTH = 780;
	var DISPLAY_HEIGHT = 100;
  var BAR_HEIGHT = 20;

  dataset_1.push(player.health);
  dataset_1_max.push(player.max_health);

  enemies.forEach(function(enemy){
    dataset_2.push(esh(enemy.maxHealth);
    dataset_2_name.push({health: enemy.health,
    											name: enemy.name});
  });

	var svg_1 = d3.select("body")
								.append("svg")
								.attr({
									id: "player",
									width:DISPLAY_WIDTH/2, 
									height:DISPLAY_HEIGHT})
								.s"border": "3px solid rgba(192,192,192,0.8)",
									"border-radius": "3px",
									"background-color": "rgba(192,192,192,0.4)",
									"z-index": "1",
									"position": "absolute",
									"left": "10",
									"top": "20"});

  var svg_2 = d3.select("body")
  							.append("svg")
  							.attr({
  								id: "enemy",
  								width:DISPLAY_WIDTH/2,
  								height:DISPLAY_HEIGHT})
  							.style({
									"border": "3px solid rgba(192,192,192,0.8)",
									"border-radius": "3px",
									"background-color": "rgba(192,192,192,0.4)",
  								"z-index": "1",
  								"position": "absolute",
  								"left": "410",
  								"top": "20"});

  var xScale_1 = d3.scale.linear()
                .domain([0, d3.max(dataset_1_max)])
                .range([0, DISPLAY_WIDTH/2])

  var xScale_2 = d3.scale.linear()
                .domain([0, d3.max(dataset_2_max)])
                .range([0, DISPLAY_WIDTH/2])

  var numData1 = dataset_1.length;
  var space1 = ( DISPLAY_HEIGHT - BAR_HEIGHT * numData1 ) / ( numData1 + 1 );

	svg_1.selectAll("rect")
		.data(dataset_1)
    .enter()
    .append("rect")
    .attr({
        x: 0,
        y: function(d, i) { return ( i * ( BAR_HEIGHT + space1 ) + space1 ); },
        width: function(d) { return ( xScale_1(d) > 0 ? xScale_1(d) : 0 ); },
        height: BAR_HEIGHT,
        fill: "red"
    });

	svg_1.selectAll("text")
		.data(dataset_1)
    .enter()
    .append("text")
    .attr({
        x:  function(d) { return ( xScale_1(d) - 30 ); },
        y: function(d, i) { return ( i * ( BAR_HEIGHT + space1 ) + space1 + 16); },
        width: function(d) { return ( xScale_1(d) > 0 ? xScale_1(d) : 0 ); }})
    .style({

    		"font-color": "white"
    })
    .html("test");

  var numData2 = dataset_2.length;
  var space2 = ( DISPLAY_HEIGHT - BAR_HEIGHT * numData2 ) / ( numData2 + 1 );

  svg_2.selectAll("rect")
    .data(dataset_2)
    .enter()
    .append("rect")
    .attr({
        x: function(d) { return (DISPLAY_WIDTH/2 - xScale_2(d)); },
        y: function(d, i) { return ( i * ( BAR_HEIGHT + space2 ) + space2 ); },
        width: function(d) { return ( xScale_2(d) > 0 ? xScale_2(d) : 0 ); },
        height: BAR_HEIGHT,
        fill: "blue"
    });

  svg_2.selectAll("text")
    .data(dataset_2_name)
    .enter()
    .append("text")
    .attr({
        x: function(d) { return (DISPLAY_WIDTH/2 - xScale_2(d.health)); },
        y: function(d, i) { return ( i * ( BAR_HEIGHT + space2 ) + space2 + 16); },
        width: function(d) { return ( xScale_2(d.heatlh) > 0 ? xScale_2(d.heatlh) : 0 ); }})
    .html(function(d) {return d.name});
}
