console.log("GRAPHICS PAGE LOADING")

var theField =[["X","X","X","X",  "X","X","X","X",  "X","X","X","X",  "X","X","X","X"],
               ["X","X","X","X",  "X","X","X","X",  "X","X","X","X",  "X","X","X","X"],
               ["X","X","X","N",  "N","N","N","N",  "N","N","N","N",  "X","X","X","X"],
               ["X","X","X","X",  "X","X","X","X",  "X","X","X","N",  "X","X","X","X"],

               ["X","X","X","X",  "X","X","X","X",  "X","X","X","N",  "X","X","X","X"],
               ["X","X","X","X",  "X","N","X","N",  "X","N","X","N",  "X","X","X","X"],
               ["X","X","X","X",  "X","X","X","X",  "X","X","X","N",  "X","X","X","X"],
               ["X","X","X","X",  "X","N","X","N",  "X","N","X","N",  "X","X","X","X"],

               ["X","X","X","X",  "X","N","X","N",  "N","N","N","N",  "X","X","X","X"],
               ["X","X","X","X",  "X","X","X","N",  "X","X","X","X",  "X","X","X","X"],
               ["X","X","X","X",  "X","N","X","N",  "X","X","X","X",  "X","X","X","X"],
               ["X","X","X","X",  "X","N","X","N",  "X","X","X","X",  "X","X","X","X"],

               ["X","N","N","N",  "X","X","X","N",  "N","N","N","N",  "X","X","X","X"],
               ["X","N","X","N",  "X","X","X","X",  "X","X","X","N",  "X","X","X","X"],
               ["X","N","N","N",  "X","X","X","X",  "X","X","X","N",  "X","X","X","X"],
               ["X","X","X","X",  "X","X","X","X",  "X","X","X","N",  "X","X","X","X"]];


// other players
var drawOtherCharacter = function(character, context){
  if(character.direction === "south") {
    if(character.framesPassed > 7) {
      character.animationFrame++;
      character.framesPassed = 0;
      if(character.animationFrame >= knight_south.length) {
        character.animationFrame = 0;
      }
    }
    context.drawImage(knight_south[character.animationFrame], (character.pos_x - backgroundScrollX), (character.pos_y - backgroundScrollY));
  } else if(character.direction === "north") {
    if(character.framesPassed > 7) {
      character.animationFrame++;
      character.framesPassed = 0;
      if(character.animationFrame >= knight_north.length) {
        character.animationFrame = 0;
      }
    }
    context.drawImage(knight_north[character.animationFrame], (character.pos_x - backgroundScrollX), (character.pos_y - backgroundScrollY));
  } else if(character.direction === "east") {
    if(character.framesPassed > 7) {
      character.animationFrame++;
      character.framesPassed = 0;
      if(character.animationFrame >= knight_east.length) {
        character.animationFrame = 0;
      }
    }
    context.drawImage(knight_east[character.animationFrame], (character.pos_x - backgroundScrollX), (character.pos_y - backgroundScrollY));
  } else if(character.direction === "west") {
    if(character.framesPassed > 7) {
      character.animationFrame++;
      character.framesPassed = 0;
      if(character.animationFrame >= knight_west.length) {
        character.animationFrame = 0;
      }
    }
    context.drawImage(knight_west[character.animationFrame], (character.pos_x - backgroundScrollX), (character.pos_y - backgroundScrollY));
  }
  if( (character.pos_x - backgroundScrollX) < (backgroundScrollX + SCREEN_WIDTH) && (character.pos_y - backgroundScrollY) < (backgroundScrollY + SCREEN_HEIGHT) ) {
    $("body").prepend('<div class="player-names" style="padding-top:5px;text-align:center;position:absolute;background-color:white;top:' + (character.pos_y - backgroundScrollY + 40).toString() + 'px;left:' + (character.pos_x - backgroundScrollX - 10).toString() + 'px;width:100px;height:30px;">' + character.name + '</div>');
  };
  character.framesPassed++;
  character.turnedThisFrame = false;
};

//draw your own character locally, relative to canvas
var drawPlayer = function(context){
  var adjusted_pos_x = your_char.pos_x - backgroundScrollX;
  var adjusted_pos_y = your_char.pos_y - backgroundScrollY;
  if(your_char.direction === "south") {
    if(your_char.framesPassed > 7) {
      your_char.animationFrame++;
      your_char.framesPassed = 0;
      if(your_char.animationFrame >= knight_south.length) {
        your_char.animationFrame = 0;
      }
    }
    context.drawImage(knight_south[your_char.animationFrame], adjusted_pos_x, adjusted_pos_y);
  } else if(your_char.direction === "north") {
    if(your_char.framesPassed > 7) {
      your_char.animationFrame++;
      your_char.framesPassed = 0;
      if(your_char.animationFrame >= knight_north.length) {
        your_char.animationFrame = 0;
      }
    }
    context.drawImage(knight_north[your_char.animationFrame], adjusted_pos_x, adjusted_pos_y);
  } else if(your_char.direction === "east") {
    if(your_char.framesPassed > 7) {
      your_char.animationFrame++;
      your_char.framesPassed = 0;
      if(your_char.animationFrame >= knight_east.length) {
        your_char.animationFrame = 0;
      }
    }
    context.drawImage(knight_east[your_char.animationFrame], adjusted_pos_x, adjusted_pos_y);
  } else if(your_char.direction === "west") {
    if(your_char.framesPassed > 7) {
      your_char.animationFrame++;
      your_char.framesPassed = 0;
      if(your_char.animationFrame >= knight_west.length) {
        your_char.animationFrame = 0;
      }
    }
    context.drawImage(knight_west[your_char.animationFrame], adjusted_pos_x, adjusted_pos_y);
  }
  your_char.framesPassed++;
};

var drawField = function(){
  // determines how much to scroll camera (aka the canvas)
  if(your_char.pos_x - backgroundScrollX >= DEAD_ZONE_WIDTH_X_MAX) {
    backgroundScrollX = Math.max(your_char.pos_x - DEAD_ZONE_WIDTH_X_MAX, 0);
  } else if (your_char.pos_x - backgroundScrollX <= DEAD_ZONE_WIDTH) {
    backgroundScrollX = Math.max(your_char.pos_x - DEAD_ZONE_WIDTH, 0);
  };
  if(your_char.pos_y - backgroundScrollY >= DEAD_ZONE_HEIGHT_Y_MAX) {
    backgroundScrollY = Math.max(your_char.pos_y - DEAD_ZONE_HEIGHT_Y_MAX, 0);
  } else if (your_char.pos_y - backgroundScrollY <= DEAD_ZONE_HEIGHT) {
    backgroundScrollY = Math.max(your_char.pos_y - DEAD_ZONE_HEIGHT, 0);
  };
  // determines whether or not the camera hit the boundary
  if(backgroundScrollX >= (SCREEN_WIDTH * SCREEN_TILES_WIDTH) ) {
      backgroundScrollX = (SCREEN_WIDTH * SCREEN_TILES_WIDTH);
  };
  if(backgroundScrollY >= (SCREEN_HEIGHT * SCREEN_TILES_HEIGHT) ) {
      backgroundScrollY = (SCREEN_HEIGHT * SCREEN_TILES_HEIGHT);
  };

  var canvas = document.getElementById('game_screen');
  var context = canvas.getContext('2d');
  // context.clearRect(0, 0, canvas.width, canvas.height);
  for(var y = 0; y < theField.length; y++) {
    for(var x = 0; x < theField[y].length; x++) {
      // TODO: this should be refactored so that it only draws within a radius of the player
      if( theField[y][x] === "N" ) {
        context.drawImage(seamless_stone, ( (SCREEN_WIDTH / 4) * x ) - backgroundScrollX, ( (SCREEN_HEIGHT / 4) * y ) - backgroundScrollY);
      } else {
        context.drawImage(seamless_grass, ( (SCREEN_WIDTH / 4) * x ) - backgroundScrollX, ( (SCREEN_HEIGHT / 4) * y ) - backgroundScrollY);
      };
    };
  };

  context.fillStyle = "#7FFFFF";
  $(".player-names").remove();
  for (var i = playerNames.length - 1; i >= 0; i--) {
    // TODO: remove aftershadow
    drawOtherCharacter(otherPlayers[playerNames[i]], context);
  };

  for (var i = npcs.length - 1; i >= 0; i--) {
    context.drawImage(npcs[i].sprite, (npcs[i].pos_x - backgroundScrollX), (npcs[i].pos_y - backgroundScrollY), npcs[i].width, npcs[i].height);
  };

  context.fillStyle = "#FF00FF";
  drawPlayer(context);

};

var drawBattle = function(){
  var canvas = document.getElementById('game_screen');
  var context = canvas.getContext('2d');
  context.drawImage(beach_battle, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

  var totalEnemyWidth = 0;

  if(inBattle === true) {
    refreshBattleDisplay();
    battleDisplay(your_char, currentEnemies);
  }

  currentEnemies.forEach(function(enemy){
    totalEnemyWidth += enemy.width;
  });

  var drawPositionX = Math.floor( (SCREEN_WIDTH / 2) - (totalEnemyWidth / 2) );
  var previousEnemiesWidths = [];
  var offset = 0;

  currentEnemies.forEach(function(enemy){
    previousEnemiesWidths.forEach(function(prevWidth){
      offset += prevWidth;
    });
    enemy.pos_x = drawPositionX + offset;
    if(enemy.pose === "dead") {
      context.drawImage(enemy.drawEnemy(), enemy.pos_x, enemy.pos_y, enemy.width, enemy.height);
    } else {
      context.drawImage(enemy.drawEnemy(), enemy.pos_x, enemy.pos_y);
      if(your_char.enemyTarget === enemy) {
        context.drawImage(selection_arrow, enemy.pos_x - 45, enemy.pos_y - 60);
      }
    }
    previousEnemiesWidths.push(enemy.width);
    offset = 0;
  });
  var slashesThisFrame = slashes.slice(0);
  for (var i = 0; i < slashesThisFrame.length; i++) {
    context.drawImage(slashesThisFrame[i].drawSlash(), slashesThisFrame[i].pos_x, slashesThisFrame[i].pos_y);
  };
  var itemsThisFrame = itemDisplays.slice(0);
  for (var i = 0; i < itemsThisFrame.length; i++) {
    context.drawImage(itemsThisFrame[i].drawItem(), (SCREEN_WIDTH / 2) - (itemsThisFrame[i].width / 2), 250, itemsThisFrame[i].width, itemsThisFrame[i].height );
  };
  var bloodThisFrame = bloodMarks.slice(0);
  for (var i = 0; i < bloodThisFrame.length; i++) {
    context.drawImage(bloodThisFrame[i].drawBlood(), bloodThisFrame[i].pos_x, bloodThisFrame[i].pos_y);
  };
}

var drawGame = function(){
  if (inBattle) {drawBattle()
  } else {
    drawField();
  };
    // refreshInformationWindow();
    informationWindow(your_char, partyMembers);
}

var setCanvasDrawingUpdate = function(){
  setInterval(drawGame, FRAME_RATE);
};

var Slash = function Slash(enemy) {
  new Audio('<%= asset_path("steelsword.wav")%>').play();
  this.currentFrame = 0;
  this.sprites = [slash01, slash02, slash03, slash04, slash05, slash06];
  this.currentSprite = -1;
  this.pos_x = (enemy.pos_x - 60) + Math.floor(Math.random() * (100)) || 0;
  this.pos_y = (enemy.pos_y - 125) + Math.floor(Math.random() * (100)) || 0;
}

Slash.prototype.drawSlash = function(){
  if (this.currentFrame % 2 === 0) {
    this.currentSprite++;
  }
  this.currentFrame++;
  this.pos_x -= 5;
  this.pos_y += 5;
  if (this.currentFrame >= 12) {
    var index = slashes.indexOf(this);
    slashes.splice(index, 1);
  }
  return this.sprites[this.currentSprite];
}


var Blood = function Blood() {
  this.pos_x = Math.floor(Math.random() * (SCREEN_WIDTH - 180));
  this.pos_y = Math.floor(Math.random() * (SCREEN_HEIGHT - 250));
  this.currentFrame = 0;
}

Blood.prototype.drawBlood = function(){
  this.currentFrame++;
  if (this.currentFrame >= 25) {
    var index = bloodMarks.indexOf(this);
    bloodMarks.splice(index, 1);
  }
  return blood_effect;
}

var Item = function Item(name) {
  this.width = 250;
  this.height = 250;
  this.sprite = current_background;
  if(name === "potion") {
    this.sprite = potion;
    this.width = 143;
    this.height = 250;
  } else if(name === "honey grahams") {
    this.sprite = honey;
    this.width = 250;
    this.height = 360;
  } else if(name === "subway pizza") {
    this.sprite = pizza;
    this.width = 200;
    this.height = 244;
  } else if(name === "vampire fang") {
    this.sprite = vampire_fang;
    this.width = 86;
    this.height = 101;
  };
  this.shrinkRate = this.width * 0.05;
  this.currentFrame = 0;
}

Item.prototype.drawItem = function(){
  this.currentFrame++;
  if (this.currentFrame >= 25) {
    var index = itemDisplays.indexOf(this);
    itemDisplays.splice(index, 1);
  }
  if(this.currentFrame > 5) {
    this.width -= this.shrinkRate;
  }
  return this.sprite;
}
