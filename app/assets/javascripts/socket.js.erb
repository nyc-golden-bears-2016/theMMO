console.log("SOCKET PAGE LOADING")
var setUpWebsocket = function(scheme){

  var uri = scheme + window.document.location.host + "/";
  wSocket = new WebSocket(uri);


  wSocket.onmessage = function(response) {
    var data = JSON.parse(response.data);
    if (data.logout === true) {
      var deleteIndex = playerNames.indexOf(data.username);
      playerNames.splice(deleteIndex, 1);
    } else if(data.username !== your_character_name) {

      // if username is not found, add it to existing users
      if (playerNames.indexOf(data.username) === -1) {
        playerNames.push(data.username);
        // initialize an object to store this player's info
        otherPlayers[data.username] = new Character(data.username);
      };
      otherPlayers[data.username].pos_x = data.pos_x;
      otherPlayers[data.username].pos_y = data.pos_y;
      // party logic
      // leave party
      if (data.leaveParty == true && partyMembers.indexOf(data.username) !== -1){
        var index = partyMembers.indexOf(data.username);
        if (index > -1) {
          partyMembers.splice(index, 1);
        }
      }
      // auto add to party you are in
      if (data.partyMembers.indexOf(your_character_name) !== -1 && data.leaveParty == false) {
        for (var i = data.partyMembers.length - 1; i >= 0; i--) {
          if(partyMembers.indexOf(data.partyMembers[i]) === -1) {
            partyMembers.push(data.partyMembers[i]);
          };
        };
        if(partyMembers.indexOf(data.username) === -1) {
          partyMembers.push(data.username);
        };
      }
      if (data.requestPartyWith === your_character_name){
        // if received party request
        if (confirm(data.username + ' requests to party with you')===true) {
          partyMembers.push(data.username);
        }
      // trade logic
      } else if (data.requestTradeWith === your_character_name){
        if (confirm(data.username + ' requests to trade with you')===true) {
          console.log("TRADE INITIATE");
        }
      }
      // party battles
      if (data.partyMembers.indexOf(your_character_name) !== -1 && data.currentEnemies.length > 0 && inBattle === false && battleOver === true){
        var teamBattleEnemies = [];
        for (var i = data.currentEnemies.length - 1; i >= 0; i--) {
          teamBattleEnemies.push(enemyMake(data.currentEnemies[i].name));
        };
        currentEnemies = teamBattleEnemies;
        prepareTeamBattle(currentEnemies);
      };

      // syncs enemy health between members in party
      if (data.inBattle === true && data.partyMembers.indexOf(your_character_name) !== -1){
        for (var i = data.currentEnemies.length - 1; i >= 0; i--) {
          if(data.currentEnemies[i].health < currentEnemies[i].health) {
            currentEnemies[i].health = data.currentEnemies[i].health;
          }
        };
      }
      // if (data.partyMembers.indexOf(your_character_name) !== -1 && data.battleOver === true) {
      //   for (var i = currentEnemies.length - 1; i >= 0; i--) {
      //     currentEnemies[i].health = 0;
      //   };
      // }
      // see slashes(attacks) from other players in your party
      if (data.partyMembers.indexOf(your_character_name) !== -1 && data.slashPos !== -1 && inBattle === true && battleOver === false) {
        console.log(data.slashPos);
        console.log(currentEnemies[data.slashPos]);
        slashes.push(new Slash(currentEnemies[data.slashPos]));
      }

      // PVP logic
      if (data.playerOpponent.indexOf(your_character_name) !== -1 && inBattle === false) {
        leaveParty = true;
        playerOpponent = data.username;
        var opponent = enemyMake("player");
        opponent.attack = data.opponentInfo.attack;
        opponent.defense = data.opponentInfo.defense;
        opponent.health = data.opponentInfo.health;
        opponent.maxHealth = data.opponentInfo.max_health;
        prepareTeamBattle([opponent]);
      }
      // syncs player and enemy health between players in PVP
      // checks to see if you were hurt
      // Harrison's attempt at pvp
      //// if (data.inBattle === true && playerOpponent === data.username) {
      ////   console.log("checking your health");
      ////     if(your_char.health > data.yourInfo.health && recentlyRecovered < 1) {
      ////       your_char.health = data.yourInfo.health;
      ////       currentEnemies[0].setPose("attacking");
      ////     }
      //// }
      //// // checks to see if opponent recovered
      //// if (data.inBattle === true && data.playerOpponent === data.username) {
      ////     if(currentEnemies[0].health < data.opponentInfo.health) {
      ////       currentEnemies[0].health = data.opponentInfo.health;
      ////     }
      //// }

      // Lloyd's attempt at pvp
      // if (data.inBattle === true && playerOpponent === data.username) {
      //   if (data.usePotion === true) {
      //     currentEnemies[0].health = data.opponentInfo.health;
      //   } else {
      //     if(your_char.health > data.yourInfo.health) {
      //       your_char.health = data.yourInfo.health;
      //       currentEnemies[0].setPose("attacking");
      //     }
      //   }
      // }
    };
    recentlyRecovered = Math.max(recentlyRecovered - 1, 0);
  };
};

var updateCharacters = function(){
  if(wSocket.readyState === 1) {
    if(partyMembers.length < 1) {  // no party members
      wSocket.send( JSON.stringify({logout: false, pos_x: your_char.pos_x, pos_y: your_char.pos_y, username: your_character_name, requestPartyWith: otherPlayertoPartyWith, requestTradeWith: otherPlayertoTradeWith, partyMembers: partyMembers, playerOpponent: playerOpponent, opponentInfo: your_char, yourInfo: currentEnemies[0], inBattle: inBattle, usePotion: usePotion, direction: your_char.direction}) );
    } else { // in party
      wSocket.send( JSON.stringify({logout: false, pos_x: your_char.pos_x, pos_y: your_char.pos_y, username: your_character_name, requestPartyWith: otherPlayertoPartyWith, requestTradeWith: otherPlayertoTradeWith, partyMembers: partyMembers, currentEnemies: currentEnemies, inBattle: inBattle, usePotion: usePotion, battleOver: battleOver, slashPos: slashPos, leaveParty: leaveParty, playerOpponent: playerOpponent, direction: your_char.direction}) );
    }
    slashPos = -1;
    otherPlayertoPartyWith = "";
    otherPlayertoTradeWith = "";
    usePotion = false;
    if (partyMembers.length === 0){leaveParty = false;}
    if (leaveParty === true || partyMembers.length === 1){partyMembers = [];}
  };
};

var setCharacterUpdate = function(character_name) {
    your_character_name = character_name;
    setInterval(updateCharacters, FRAME_RATE/1.5);
};

var logout = function() {
  wSocket.send( JSON.stringify({logout: true, username: your_character_name}) );
};

var setAutoLogout = function() {
  $( window ).unload(logout);
};
