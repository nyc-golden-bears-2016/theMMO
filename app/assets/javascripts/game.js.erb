var FRAME_RATE = 33;
var SCREEN_WIDTH = 800;
var SCREEN_HEIGHT = 600;
var DEAD_ZONE_WIDTH = 250;
var DEAD_ZONE_HEIGHT = 200;
var DEAD_ZONE_WIDTH_X_MAX = (SCREEN_WIDTH - DEAD_ZONE_WIDTH);
var DEAD_ZONE_HEIGHT_Y_MAX = (SCREEN_HEIGHT - DEAD_ZONE_HEIGHT);
var SCREEN_TILES_WIDTH = 8;
var SCREEN_TILES_HEIGHT = 6;
var currentScrollFactorX = 0;
var currentScrollFactorY = 0;

// stored with your character name passed in by the erb view
var your_username = "";
// upon keydown, keycode is loaded in here and delted upon keyup
var keys_pressed = [];

var wSocket = 0;

var setUpWebsocket = function(scheme){

  var uri = scheme + window.document.location.host + "/";
  wSocket = new WebSocket(uri);


  wSocket.onmessage = function(response) {
    var data = JSON.parse(response.data);
    if (data.logout === true) {
      var deleteIndex = playerNames.indexOf(data.username);
      playerNames.splice(deleteIndex, 1);
    } else {

      // if username is not found, add it to existing users
      if (playerNames.indexOf(data.username) === -1) {
        playerNames.push(data.username);
        // initialize an object to store this player's info
        otherPlayers[data.username] = new Character;
      }
      otherPlayers[data.username].pos_x = data.pos_x;
      otherPlayers[data.username].pos_y = data.pos_y;
    }
  };

  wSocket.onclose = function(response) {
    console.log("closed!!!")
  };
};

var Character = function Character(){
  this.pos_x = 0;
  this.pos_y = 0;
};

your_char = new Character;

var otherPlayers = {};
var playerNames = [];


var updateCharacters = function(){
  if(wSocket.readyState === 1) {
    wSocket.send( JSON.stringify({logout: false, pos_x: your_char.pos_x, pos_y: your_char.pos_y, username: your_username}) );
  };
};

var processInputBuffer = function(){
  if (keys_pressed.indexOf(16) != -1) {
      if (keys_pressed.indexOf(38) != -1) {
        your_char.pos_y--;
      };
      if (keys_pressed.indexOf(40) != -1) {
        your_char.pos_y++;
      };
      if (keys_pressed.indexOf(37) != -1) {
        your_char.pos_x--;
      };
      if (keys_pressed.indexOf(39) != -1) {
        your_char.pos_x++;
      };
    } else {
      if (keys_pressed.indexOf(38) != -1) {
        your_char.pos_y-= 4;
      };
      if (keys_pressed.indexOf(40) != -1) {
        your_char.pos_y+= 4;
      };
      if (keys_pressed.indexOf(37) != -1) {
        your_char.pos_x-= 4;
      };
      if (keys_pressed.indexOf(39) != -1) {
        your_char.pos_x+= 4;
      };
    };
};


var allowInput = function() {
  $(document).keydown(function(e){
    e.preventDefault();
    if(keys_pressed.indexOf(e.which) === -1) {
      keys_pressed.push(e.which);
    };
    console.log(keys_pressed);
  });
  $(document).keyup(function(e){
    e.preventDefault();
    keys_pressed = keys_pressed.filter(function(keycode){
      return keycode != e.which;
    });
  });
  setInterval(processInputBuffer, FRAME_RATE/2);
};

var setCharacterUpdate = function(username) {
    your_username = username;
    setInterval(updateCharacters, FRAME_RATE/3);
};

var drawCharacter = function(character, context){
  context.beginPath();
  context.moveTo( (character.pos_x - currentScrollFactorX), (character.pos_y - currentScrollFactorY));
  context.lineTo( (character.pos_x - currentScrollFactorX) + 25, (character.pos_y - currentScrollFactorY) + 25);
  context.lineTo( (character.pos_x - currentScrollFactorX) + 25, (character.pos_y - currentScrollFactorY) - 25);
  context.fill();
};

var drawPlayer = function(context){
  var adjusted_pos_x = your_char.pos_x - currentScrollFactorX;
  var adjusted_pos_y = your_char.pos_y - currentScrollFactorY;
  context.beginPath();
  context.moveTo(adjusted_pos_x, adjusted_pos_y);
  context.lineTo(adjusted_pos_x + 25, adjusted_pos_y + 25);
  context.lineTo(adjusted_pos_x + 25, adjusted_pos_y - 25);
  context.fill();
};

var current_background = new Image();
current_background.src = '<%= asset_path("dracula-1280x720.png") %>'
current_background.onload = function(){
  console.log("background loaded");
}


var drawGame = function(){
  if(your_char.pos_x - currentScrollFactorX >= DEAD_ZONE_WIDTH_X_MAX) {
    currentScrollFactorX = Math.max(your_char.pos_x - DEAD_ZONE_WIDTH_X_MAX, 0);
  } else if (your_char.pos_x - currentScrollFactorX <= DEAD_ZONE_WIDTH) {
    currentScrollFactorX = Math.max(your_char.pos_x - DEAD_ZONE_WIDTH, 0);
  }
  if(your_char.pos_y - currentScrollFactorY >= DEAD_ZONE_HEIGHT_Y_MAX) {
    currentScrollFactorY = Math.max(your_char.pos_y - DEAD_ZONE_HEIGHT_Y_MAX, 0);
  } else if (your_char.pos_y - currentScrollFactorY <= DEAD_ZONE_HEIGHT) {
    currentScrollFactorY = Math.max(your_char.pos_y - DEAD_ZONE_HEIGHT, 0);
  }
  var canvas = document.getElementById('game_screen');
  var context = canvas.getContext('2d');
  // context.clearRect(0, 0, canvas.width, canvas.height);
  for(var x = SCREEN_TILES_WIDTH; x >= 0; x--) {
    for(var y = SCREEN_TILES_HEIGHT; y >= 0; y--) {
      // TODO: this should be refactored so that it only draws within a radius of the player, roughly 600 pixels in X direction, and roughly 450 pixels in Y direction
      context.drawImage(current_background, (SCREEN_WIDTH * x) - currentScrollFactorX, (SCREEN_HEIGHT * y) - currentScrollFactorY, SCREEN_WIDTH, SCREEN_HEIGHT);
    };
  };

  context.fillStyle = "#7FFFFF";
  for (var i = playerNames.length - 1; i >= 0; i--) {
    drawCharacter(otherPlayers[playerNames[i]], context);
  };

  context.fillStyle = "#FF00FF";
  drawPlayer(context);
};

var setCanvasDrawingUpdate = function(){
  setInterval(drawGame, FRAME_RATE);
};

var logout = function() {
  wSocket.send( JSON.stringify({logout: true, username: your_username}) );
};

var setAutoLogout = function() {
  $( window ).unload(logout);
};
